Content
=======

Section 10: Conditions, Loops in Terraform
63. Condition Statements in Terraform
64. Lab : Condition Statements in Terraform
65. Terraform Built-In Functions
66. Lab : Terraform Built-In Functions
67. Loops in TerraFrom HCL
68. Terraform Project Structure
69. Lab : Terraform Project Structure





63. Condition Statements in Terraform
=====================================

➢ Terraform provide option to put conditions in HCL.

➢ Booleans can be used in a Terraform tenerary operation to create an if-else statement
--------------------------------------------------
CONDITION ? TRUEVAL : FALSEVAL
--------------------------------------------------

➢ Example
--------------------------------------------------
resource "aws_eip" "web-eip" {
  count = var.create_eip == true ? 1 : 0
}
--------------------------------------------------

➢ Conditional Support Operators.

	➢ Equality: == and !=		# equal / not equal

	➢ Numeric Comparison: > , < , >= , <=

	➢ Boolean logic: && , ||, Unary !		# and / or / true_alse





64. Lab : Condition Statements in Terraform
===========================================

We have 2 files
---------------
➢ create_instance.tf
➢ variable.tf


create_instance.tf
--------------------------------------------------
provider "aws" {
  region     = var.AWS_REGION
}

module "ec2_cluster" {
    source = "github.com/terraform-aws-modules/terraform-aws-ec2-instance.git"		# used module

    name            = "my-cluster"					# cluster name
    ami             = "ami-05692172625678b4e"				# amazon machine image
    instance_type   = "t2.micro"					# type hardware - t2.micro - free tier
    subnet_id       = "subnet-f30171bf"					# vpc public subnet id
    instance_count  = var.environment == "Production" ? 2 : 1		# condition
    # create 2 instances if environment is 'Production', else create only one instance

    tags = {								# tags
    Terraform       = "true"
    Environment     = var.environment
    }
}
--------------------------------------------------



variable.tf
--------------------------------------------------
variable "AWS_REGION" {
    type        = string
    default     = "us-east-2"
}

variable "environment" {
    type        = string
    default     = "Production"
}
--------------------------------------------------

Login to the DigitalOcean ubuntu and pull the files from github.
	terminal --> ssh root@IP
	terminal --> password

Update the linux package manager
	terminal --> sudo apt-get update

Pull the repo
	terminal --> git clone repo_url
	or
	terminal --> git pull

We need to install AWS CLI on the machine
	terminal --> sudo apt-get install awscli
	terminal --> y					# confirm

Set Secret Access Key and Aceess Key as environemnt variable
	terminal --> export AWS_ACCESS_KEY="AKIAY65Y5OPLU3XH5T6O"
	terminal --> export AWS_SECRET_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

Check if the secret access key and access key are successfully set as environment variable
	terminal --> echo $AWS_SECRET_KEY
	terminal --> echo $AWS_ACCESS_KEY


INIT
----
Initialize terrafomr
	terminal --> terraform init

PLAN
----
Plan terraform resources
	terminal --> terraform plan
	terminal --> AWS Secret access key

	# the plan should be successful and we can review the logs
	# result: 	


APPLY
-----
Apply the plan made on the DigitalOcean Ubuntu machine
	terminal --> terraform apply
	terminal --> xxxxxxxxxxxxxxxxxxxxxx		# provide the seucrity key
	terminal --> yes				# confirm


DESTROY
-------
We can now destroy the created resources on AWS
	terminal --> terraform destroy
	terminal --> xxxxxxxxxxxxxxxxxxxxxx	# provide the seucrity key
	terminal --> yes






65. Terraform Built-In Functions
================================

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 




66. Lab : Terraform Built-In Functions
======================================

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 




67. Loops in TerraFrom HCL
==========================

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 




68. Terraform Project Structure
===============================

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 




69. Lab : Terraform Project Structure
=====================================

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 

➢ 





