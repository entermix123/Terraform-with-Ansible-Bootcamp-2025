Content
=======

Section 11: Packer and Terraform
70. Packer Introduction and It's Use
71. Install Packer
72. Lab : Create Custom AMI Scenario I
73. Lab : Create Custom AMI Scenario II
74. Lab : Terraform + Packer




70. Packer Introduction and It's Use
====================================

Packer is developed by HashiCorp like Terraform.

➢ Packer is as an open source tool for creating identical machine images for multiple platforms from a single source configuration.
	- We can create images for AWS and GCP with single configuration

➢ A machine image is a single static unit that contains a pre-configured operating system and installed software which is used to quickly create new running machines.
	- Pre Configured Image - OS
	- Configuration - Packages which need to be installed

➢ Packer images allow you to launch completely provisioned and configured machines in seconds.


How Packer Build the Image
--------------------------
Process:

Packer ---> Machine Image + JSON ---> Amazon EC2 ---> New Machine Image

    	➢ Temporary instance with
	  ➢ Machine Image - OS
	  ➢ JSON - Packer template



Packer Terminology
------------------

➢ Template - Configuration file used to define what image we want built and how is called a template.

➢ Builders - Builders are responsible for creating machines and generating images from them for various platforms.

➢ There are separate builders for each Cloud Provider, each with its own configuration.

➢ Provisioners - Provisioners are used to install and configure the machine image after booting. they prepare the system for use through for example installing the necessary packages.

➢ We can use the packer to build AWS AMIs.

➢ Custom AMI will be handy AMI with preinstall configuration.

➢ This will speed up the boot time of Machine.

➢ This will be helpful to create the cluster Services.





71. Install Packer
==================

Install Packer with instructions from here - https://developer.hashicorp.com/packer/install

Install Packer on Ubuntu
------------------------

Navigate to root directory
	terminal --> cd /root

Install Packer
	terminal --> wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install packer

Verify Packer installation
	terminal --> packer -v		# result: Packer v1.13.1

Show Packer command
	terminal --> packer

result:
Available commands are:
    build           build image(s) from template
    console         creates a console for testing variable interpolation
    fix             fixes templates from old versions of packer
    fmt             Rewrites HCL2 config files to canonical format
    hcl2_upgrade    transform a JSON template into an HCL2 configuration
    init            Install missing plugins or upgrade plugins
    inspect         see components of a template
    plugins         Interact with Packer plugins and catalog
    validate        check that a template is valid
    version         Prints the Packer version




72. Lab : Create Custom AMI Scenario I
======================================

In this Lab we will create custom AMI with scenario1.json. 

Flow of Packer
--------------

Validate --> Build --> Save Artifacts (image) --> Use Artifacts further in Terraform


Packer template components
--------------------------
- variable
- builder
- provisioner
- post-preprocessor



We have Folder and File structure
---------------------------------

|-- Deploy_Custom_Image
|   |-- custom_ami_deployment
|   |    + createInstance.tf
|   |    + install_custom_ami.json
|   |    + install_nginx.sh
|   |    + variable.tf
|   |
|   |-- modules
|       |-- vpc
|	     + variable.tf
|	     + vpc.tf
|
|-- Scenario1
|    + scenarion1.json
|
|-- Scenario2
     + helloworld.txt
     + install_nginx.sh
     + scenarion2.json



Scenario 1
----------

Scenario1/scenarion1.json
--------------------------------------------------
{
    "variables": {
        "aws_access_key": "",
        "aws_secret_key": ""
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "us-east-2",
            "source_ami_filter": {
                "filters": {
                    "virtualization-type": "hvm",
                    "name": "ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*",
                    "root-device-type": "ebs"
                },
                "owners": [
                    "099720109477"
                ],
                "most_recent": true
            },
            "instance_type": "t2.micro",
            "ssh_username": "ubuntu",
            "ami_name": "scenario1-packer-{{timestamp}}"
        }
    ]
}
--------------------------------------------------



Sceanrio1 
---------

Login to the DigitalOcean ubuntu and pull the files from github.
	terminal --> ssh root@IP
	terminal --> password

Update the linux package manager
	terminal --> sudo apt-get update

Pull the repo
	terminal --> git clone repo_url
	or
	terminal --> git pull

We need to install AWS CLI on the machine
	terminal --> sudo apt-get install awscli
	terminal --> y					# confirm


Install Packer on Ubuntu
------------------------

Navigate to root directory
	terminal --> cd /root

Install Packer
	terminal --> wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install packer

Verify Packer installation
	terminal --> packer -v		# result: Packer v1.13.1


Install packer amazon plugin
	Navigate to Packer configuration directory
		terminal --> cd ${HOME}/.config/packer/
	INstall amazon plugin
		terminal --> packer plugins install github.com/hashicorp/amazon


Navigate to Packer scenario 1 directory
	terminal --> cd /Packer/Scenarion1

Edit scenario1.json file and set aws_access_key and aes_secret_key
	terminal --> vi scenario1.json

scenario1.json
--------------------------------------------------
{
    "variables": {
        "aws_access_key": "xxxxxxxxxxxxxxxxxxx",			# add access key
        "aws_secret_key": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"		# add secret key
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "us-east-2",
            "source_ami_filter": {
                "filters": {
                    "virtualization-type": "hvm",
                    "name": "ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*",
                    "root-device-type": "ebs"
                },
                "owners": [
                    "099720109477"
                ],
                "most_recent": true
            },
            "instance_type": "t2.micro",
            "ssh_username": "ubuntu",
            "ami_name": "scenario1-packer-{{timestamp}}"
        }
    ]
}
--------------------------------------------------
save changes - escape, :wq!, enter



VALIDATE
--------
Validate scenario1.json file
	terminal --> packer validate scenario1.json

	# result: The configuration is valid.


BUILD - this will charge our AWS Account appr. $0.03 per AMI
-----
Build Packer consifguration scenario1.json
	terminal --> packer build scenario1.json

Result logs: 
- Instance will be created
- Connect to the instance via ssh and copy instance configurations
- Stop the instance
- Create AMI image
- Terminate the instance
- Cleaning volumes
- Deleting resources

Message with the region and created ami name:
us-east-2: ami-05e042e65dac3523c

We can check/delete the created AMI on AWS/EC2/AMIs.







73. Lab : Create Custom AMI Scenario II
=======================================

In this Lab we will create custom AMI with scenario2.json and use prvisioner to configure additional software on the AMI image.

Flow of Packer
--------------

Validate --> Build --> Save Artifacts (image) --> Use Artifacts further in Terraform


Packer template components
--------------------------
- variable
- builder
- provisioner
- post-preprocessor



We have Folder and File structure
---------------------------------

|-- Deploy_Custom_Image
|   |-- custom_ami_deployment
|   |    + createInstance.tf
|   |    + install_custom_ami.json
|   |    + install_nginx.sh
|   |    + variable.tf
|   |
|   |-- modules
|       |-- vpc
|	     + variable.tf
|	     + vpc.tf
|
|-- Scenario1
|    + scenarion1.json
|
|-- Scenario2
     + helloworld.txt
     + install_nginx.sh
     + scenarion2.json




Scenario 2
----------

Scenario2/scenarion2.json
--------------------------------------------------
{
    "variables": {
        "aws_access_key": "",
        "aws_secret_key": ""
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "us-east-2",
            "source_ami_filter": {
                "filters": {
                    "virtualization-type": "hvm",
                    "name": "ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*",
                    "root-device-type": "ebs"
                },
                "owners": [
                    "099720109477"
                ],
                "most_recent": true
            },
            "instance_type": "t2.micro",
            "ssh_username": "ubuntu",
            "ami_name": "scenario1-packer-{{timestamp}}"
        }
    ],
    "provisioners": [
        {
            "type": "file",
            "source": "./helloworld.txt",
            "destination": "/home/ubuntu/"
        },
        {
            "type": "shell",
            "inline": [
                "ls -al /home/ubuntu",
                "cat /home/ubuntu/helloworld.txt"
            ]
        },
        {
            "type": "shell",
            "script": "./install_nginx.sh"
        }
    ]
}
--------------------------------------------------


Scenario2/helloworld.txt
--------------------------------------------------
Hello Team, This is custom AMI via Packer.
--------------------------------------------------


Scenario2/intall_nginx.ssh
--------------------------------------------------
sudo apt-get update
sudo apt-get -y install nginx
--------------------------------------------------



Login to the DigitalOcean ubuntu and pull the files from github.
	terminal --> ssh root@IP
	terminal --> password

Update the linux package manager
	terminal --> sudo apt-get update

Pull the repo
	terminal --> git clone repo_url
	or
	terminal --> git pull

We need to install AWS CLI on the machine
	terminal --> sudo apt-get install awscli
	terminal --> y					# confirm


Install Packer on Ubuntu
------------------------

Navigate to root directory
	terminal --> cd /root

Install Packer
	terminal --> wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install packer

Verify Packer installation
	terminal --> packer -v		# result: Packer v1.13.1

Install packer amazon plugin
	Navigate to Packer configuration directory
		terminal --> cd ${HOME}/.config/packer/
	INstall amazon plugin
		terminal --> packer plugins install github.com/hashicorp/amazon

Navigate to Packer scenario 1 directory
	terminal --> cd /Packer/Scenarion1

Edit scenario1.json file and set aws_access_key and aes_secret_key
	terminal --> vi scenario2.json

scenario2.json
--------------------------------------------------
{
    "variables": {
        "aws_access_key": "xxxxxxxxxxxxxxxxx",
        "aws_secret_key": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "us-east-2",
            "source_ami_filter": {
                "filters": {
                    "virtualization-type": "hvm",
                    "name": "ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*",
                    "root-device-type": "ebs"
                },
                "owners": [
                    "099720109477"
                ],
                "most_recent": true
            },
            "instance_type": "t2.micro",
            "ssh_username": "ubuntu",
            "ami_name": "scenario1-packer-{{timestamp}}"
        }
    ],
    "provisioners": [
        {
            "type": "file",
            "source": "./helloworld.txt",
            "destination": "/home/ubuntu/"
        },
        {
            "type": "shell",
            "inline": [
                "ls -al /home/ubuntu",
                "cat /home/ubuntu/helloworld.txt"
            ]
        },
        {
            "type": "shell",
            "script": "./install_nginx.sh"
        }
    ]
}
--------------------------------------------------
save changes - escape, :wq!, enter

We can see that we have 'provisioners' section.
 

VALIDATE
--------
Validate scenario2.json file
	terminal --> packer validate scenario2.json

	# result: The configuration is valid.


BUILD - this will charge our AWS Account appr. $0.03 per AMI
-----
Build Packer consifguration scenario1.json
	terminal --> packer build scenario2.json

Result logs: 
- Instance will be created
- Connect to the instance via ssh and copy instance configurations
- uploading helloworld.txt to the instance
- execute the scripts
- list all content of the image
- print the message in the heloworld.txt - Hello Team, This is custom AMI via Packer.
- install nginx
- Stop the instance
- Create AMI image
- Terminate the instance
- Cleaning volumes
- Deleting resources

Message with the region and created ami name:
us-east-2: ami-05e042e65daa3425d

This image contains Linux Ubuntu with installed Nginx.

We can check/delete the created AMI on AWS/EC2/AMIs.




74. Lab : Terraform + Packer
============================

In this lab we will combine Terraform and Packer to create and deploy instance with custom image.


Configuration management diagram
--------------------------------
							    contains
VPC --> Security Group --> EC2 Instance   with   Custom AMI -------- Nginx
 |		|		  |		     |		|
 ----------------------------------		     |		---- Custom configuration
		|				     |
       Managed with Terraform		     Created by Packer

VPC will be created with module,
The Security Group will use the VPC,
EC2 Instance will be created with module,
Cistom AMI will be created by Packer.



Flow of Packer
--------------

Validate --> Build --> Save Artifacts (image) --> Use Artifacts further in Terraform


We have Folder and File structure
---------------------------------

|-- Deploy_Custom_Image
|   |-- custom_ami_deployment
|   |    + createInstance.tf
|   |    + install_custom_ami.json
|   |    + install_nginx.sh
|   |    + variable.tf
|   |
|   |-- modules
|       |-- vpc
|	     + variable.tf
|	     + vpc.tf
|
|-- Scenario1
|    + scenarion1.json
|
|-- Scenario2
     + helloworld.txt
     + install_nginx.sh
     + scenarion2.json



Deploy_Custom_Image
-------------------

Deploy_Custom_Image/custom_ami_deployment/createInstance.tf
--------------------------------------------------
# Create Instance uisng Custom VPC

module "develop-vpc" {				# use module
    source      = "../modules/vpc"		# module source

    ENVIRONMENT = var.ENVIRONMENT		# set local variable for ENVIRONMENT
    AWS_REGION  = var.AWS_REGION		# set local variables for AWS_REGION
}

provider "aws" {				# provider resource
  region = var.AWS_REGION			# use local variable with AWS_REGION
}

#Resource key pair
resource "aws_key_pair" "levelup_key" {		# KeyPair
  key_name      = "levelup_key"			# key name
  public_key    = file(var.public_key_path)	# path to public key location
}

#Secutiry Group for Instances					
resource "aws_security_group" "allow-ssh" {			# Security Group resource
  vpc_id      = module.develop-vpc.my_vpc_id			# use vpc id
  name        = "allow-ssh-${var.ENVIRONMENT}"			# set name with prefix
  description = "security group that allows ssh traffic"	# short description

  egress {				# outbound traffic
    from_port   = 0			# from any port
    to_port     = 0			# to any port
    protocol    = "-1"			# '-1' - all protocols
    cidr_blocks = ["0.0.0.0/0"]		# all IPs - Classless Inter-Domain Routing (CIDR)
  }

  ingress {				# inbound traffic
    from_port   = 22			# from port 22
    to_port     = 22			# to port 22 - port 22 only
    protocol    = "tcp"			# tcp protocol only
    cidr_blocks = ["0.0.0.0/0"]		# allow all IPs - Classless Inter-Domain Routing
  }

  tags = {				# tags
    Name         = "allow-ssh"
    Environmnent = var.ENVIRONMENT
  }
}

# Create Instance Group
resource "aws_instance" "my-instance" {					# instance resource
  ami           = var.AMI_ID		# amazon machine image - this will be generated from install_custom_ami.json file
  instance_type = var.INSTANCE_TYPE					# hardware type - t2.micro - free tier

  # the VPC subnet
  subnet_id = element(module.develop-vpc.public_subnets, 0)		# take first public subment 
  availability_zone = "${var.AWS_REGION}a"				# use first availability zone

  # the security group
  vpc_security_group_ids = ["${aws_security_group.allow-ssh.id}"]	# SG id

  # the public SSH key
  key_name = aws_key_pair.levelup_key.key_name				# use key with name

  tags = {								# tags
    Name         = "instance-${var.ENVIRONMENT}"
    Environmnent = var.ENVIRONMENT
  }
}
--------------------------------------------------



Deploy_Custom_Image/custom_ami_deployment/install_custom_ami.json
--------------------------------------------------
{
    "variables": {
        "aws_access_key": "",
        "aws_secret_key": ""
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "us-east-2",
            "source_ami_filter": {
                "filters": {
                    "virtualization-type": "hvm",
                    "name": "ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*",
                    "root-device-type": "ebs"
                },
                "owners": [
                    "099720109477"
                ],
                "most_recent": true
            },
            "instance_type": "t2.micro",
            "ssh_username": "ubuntu",
            "ami_name": "custom-packer-{{timestamp}}"
        }
    ],
    "provisioners": [
        {
            "type": "shell",
            "script": "./install_nginx.sh",
            "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
            "pause_before": "10s"
        }
    ]
}
--------------------------------------------------

In 'provisioners' section we set execution of 'install_nginx.sh' script and set all variables in the path of the AMI.



Deploy_Custom_Image/custom_ami_deployment/install_nginx.sh
--------------------------------------------------
#!/bin/bash						# use bach interpreter
apt-get update						# update linux package manager
apt-get install -y nginx docker.io			# install nginx and docker
--------------------------------------------------



Deploy_Custom_Image/custom_ami_deployment/variable.tf
--------------------------------------------------
# Variable for Create Instance Module
variable "public_key_path" {
  description = "Public key path"
  default = "~/.ssh/levelup_key.pub"
}

variable "ENVIRONMENT" {
    type    = string
    default = "development"
}

variable "AMI_ID" {
    type    = string
    default = ""
}

variable "AWS_REGION" {
default = "us-east-2"
}

variable "INSTANCE_TYPE" {
  default = "t2.micro"
}
--------------------------------------------------


Deploy_Custom_Image/modlules/vpc/vpc.tf					CREATE VPC
--------------------------------------------------			----------
#Custom VPC for my Project 
module "levelup-vpc" {							# use module
  source = "terraform-aws-modules/vpc/aws"				# module source

  name = "vpc-${var.ENVIRONMENT}"					# set name with prefix
  cidr = "10.0.0.0/16"							# set IP ranges - Classless Inter-Domain Routing (CIDR)

  azs             = ["${var.AWS_REGION}a", "${var.AWS_REGION}b", "${var.AWS_REGION}c"]	# set availability zones
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]			# set private subnets ranges
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]			# set public subnets ranges

  enable_nat_gateway = false	# Network Address Translation (NAT) service
  enable_vpn_gateway = false

  tags = {				# tags
    Terraform   = "true"	
    Environment = var.ENVIRONMENT
  }
}

#Output Specific to Custom VPC
output "my_vpc_id" {						# print vpc id on launch
  description = "VPC ID"
  value       = module.levelup-vpc.vpc_id
}

output "private_subnets" {					# print private subnet ids on launch
  description = "List of IDs of private subnets"
  value       = module.levelup-vpc.private_subnets
}

output "public_subnets" {					# print public subnet ids on launch 
  description = "List of IDs of public subnets"
  value       = module.levelup-vpc.public_subnets
}
--------------------------------------------------



Deploy_Custom_Image/modlules/vpc/variable.tf
--------------------------------------------------
#Define Variable for Custom Module VPC

variable "AWS_REGION" {
    type    = string
    default = "us-east-2"				# set default AWS region
}

variable "ENVIRONMENT" {
    type    = string
    default = ""
}
--------------------------------------------------



Login to the DigitalOcean ubuntu and pull the files from github.
	terminal --> ssh root@IP
	terminal --> password

Update the linux package manager
	terminal --> sudo apt-get update

Pull the repo
	terminal --> git clone repo_url
	or
	terminal --> git pull

We need to install AWS CLI on the machine
	terminal --> sudo apt-get install awscli
	terminal --> y					# confirm


Install Packer on Ubuntu
------------------------

Navigate to root directory
	terminal --> cd /root

Install Packer
	terminal --> wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(grep -oP '(?<=UBUNTU_CODENAME=).*' /etc/os-release || lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install packer

Verify Packer installation
	terminal --> packer -v		# result: Packer v1.13.1

Install packer amazon plugin
	Navigate to Packer configuration directory
		terminal --> cd ${HOME}/.config/packer/
	INstall amazon plugin
		terminal --> packer plugins install github.com/hashicorp/amazon

Navigate to Packer scenario 1 directory
	terminal --> cd custom_ami_deployment

Edit scenario1.json file and set aws_access_key and aes_secret_key
	terminal --> vi install_custom_ami.json

install_custom_ami.json
--------------------------------------------------
{
    "variables": {
        "aws_access_key": "xxxxxxxxxxxxxxxxx",
        "aws_secret_key": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    },
    "builders": [
        {
            "type": "amazon-ebs",
            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",
            "region": "us-east-2",
            "source_ami_filter": {
                "filters": {
                    "virtualization-type": "hvm",
                    "name": "ubuntu/images/*ubuntu-xenial-16.04-amd64-server-*",
                    "root-device-type": "ebs"
                },
                "owners": [
                    "099720109477"
                ],
                "most_recent": true
            },
            "instance_type": "t2.micro",
            "ssh_username": "ubuntu",
            "ami_name": "custom-packer-{{timestamp}}"
        }
    ],
    "provisioners": [
        {
            "type": "shell",
            "script": "./install_nginx.sh",
            "execute_command": "{{ .Vars }} sudo -E sh '{{ .Path }}'",
            "pause_before": "10s"
        }
    ]
}
--------------------------------------------------
save changes - escape, :wq!, enter
 

VALIDATE
--------
Validate scenario2.json file
	terminal --> packer validate install_custom_ami.json

	# result: The configuration is valid.


BUILD - this will charge our AWS Account appr. $0.03 per AMI
-----
Build Packer consifguration scenario1.json
	terminal --> packer build scenario2.json

Result logs: 
- Instance will be created
- Connect to the instance via ssh and copy instance configurations
- uploading helloworld.txt to the instance
- execute the scripts
- list all content of the image
- print the message in the heloworld.txt - Hello Team, This is custom AMI via Packer.
- install nginx
- install docker.io
- Stop the instance
- Create AMI image
- Terminate the instance
- Cleaning volumes
- Deleting resources

Message with the region and created ami name:
us-east-2: ami-05e456e75daa6779a



Configure AWS Access and Secret Key:
------------------------------------
Set Secret Access Key and Aceess Key as environemnt variable
	terminal --> export AWS_ACCESS_KEY="AKIAY65Y5OPLU3XH5T6O"
	terminal --> export AWS_SECRET_KEY="xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

Check if the secret access key and access key are successfully set as environment variable
	terminal --> echo $AWS_SECRET_KEY
	terminal --> echo $AWS_ACCESS_KEY


Terraform INIT
--------------
Initialize terrafomr
	terminal --> terraform init
	# we can see console logs of downloaded modules

PLAN
----
Plan terraform resources
	terminal --> terraform plan

	# the plan should be successful and we can review the logs
	# result: 	
		Plan: 25 to add, 0 to change, 0 to destroy.

APPLY
-----
Apply the plan and give the custom AMI id as variable - We can take the AMI id from AWS/AMIs or copy oit after the packer build.
	terminal --> terraform apply -var AMI_ID=ami-05e456e75daa6779a
	terminal --> yes				# confirm

Ckech the created resources on AWS
Check instance on AWS/EC2.


Generate keys if not generated
Navigate to root/.ssh folder
	terminal --> cd /root/.ssh/

Generate private and public key
	terminal --> ssh-keygen -f levelup_key
	terminal --> enter
	terminal --> enter


Copy the public IP from the console and connect to the instance
	terminal --> ssh instance_public_ip -l ubuntu -i ~/.ssh/levelup_key

	# ssh instance_public_ip		- connect to the instance
	# -l ubuntu				- login as ubuntu user
	# -i levelup_key			- use terraform public key

Now we are logged into the instance.

Check if nginx is installed on the machine
	instance terminal --> apt list --installed | grep nginx

	# result: nginx packages should be present on the machine

Check if docker is installed on the machine
	instance terminal --> apt list --installed | grep docker

	# result: docker packages should be present on the machine

Try to access niginx
	instance terminal --> curl localhost

	# the result should be the html of nginx start page

Show docker version
	instance terminal --> docker --version

	# result: version of docker should be printed


This proves that we can preinstall software on custom amis.

Exit the instance 
	instance terminal --> exit 

DESTROY
-------
Destroy all resources on AWS
	terminal --> terraform destroy
	terminal --> yes



